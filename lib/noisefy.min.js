!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("noisefy",[],t):"object"==typeof exports?exports.noisefy=t():e.noisefy=t()}("undefined"!=typeof self?self:this,function(){return function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){"use strict";function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._audioContext=t}var t,n,r;return t=e,(n=[{key:"connect",value:function(e){return this.node.connect(e),e}},{key:"disconnect",value:function(){return this.node.disconnect(),this.node}},{key:"destroy",value:function(){return this.disconnect()}},{key:"audioContext",get:function(){return this._audioContext},set:function(e){this._audioContext=e}},{key:"node",get:function(){return this._node},set:function(e){this._node=e}}])&&o(t.prototype,n),r&&o(t,r),e}();t.default=r,e.exports=t.default},function(e,t,n){"use strict";(function(n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o="undefined"!=typeof window?window:n,r=navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia||navigator.msGetUserMedia,i=o.AudioContext||o.webkitAudioContext||o.mozAudioContext||o.msAudioContext,u={hasGetUserMedia:function(){return!!r},hasAudioContext:function(){return!!i}};t.default=u,e.exports=t.default}).call(this,n(4))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"Input",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"Output",{enumerable:!0,get:function(){return r.default}}),Object.defineProperty(t,"Volume",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(t,"hasAudioContext",{enumerable:!0,get:function(){return u.hasAudioContext}});var o=f(n(3)),r=f(n(5)),i=f(n(6)),u=n(1);function f(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o,r=(o=n(0))&&o.__esModule?o:{default:o},i=n(1);function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function c(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var s=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=c(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e)))._deferredConnects=[],n._hasPermissions=!1,n}var n,o,u;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t)}(t,r.default),n=t,(o=[{key:"getUserMedia",value:function(){var e=this;return new Promise(function(t,n){i.hasGetUserMedia?navigator.getUserMedia({audio:!0},function(n){e.input=n,e._hasPermissions=!0,e._deferredConnects.forEach(function(t){e.connect(t)}),t(n)},function(e){n(e)}):n(Error("Your browser does not support the use of user-media, please upgrade or use another browser!"))})}},{key:"connect",value:function(e){return void 0===this.node?(this._deferredConnects.push(e),e):(this.node.connect(e),e)}},{key:"getAudioDevices",value:function(){var e=this;return new Promise(function(t,n){e._hasPermissions?navigator.mediaDevices.enumerateDevices().then(function(e){t(e.filter(function(e){return e.kind&&"audioinput"===e.kind}))}).catch(function(e){n(e)}):e.getUserMedia().then(function(){navigator.mediaDevices.enumerateDevices().then(function(e){t(e.filter(function(e){return e.kind&&"audioinput"===e.kind}))}).catch(function(e){n(e)})}).catch(function(e){n(e)})})}},{key:"input",get:function(){return this.node},set:function(e){this.node=this.audioContext.createMediaStreamSource(e)}}])&&f(n.prototype,o),u&&f(n,u),t}();t.default=s,e.exports=t.default},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o,r=(o=n(0))&&o.__esModule?o:{default:o};function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var c=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=u(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))).audioContext&&(n.node=e.destination),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(t,r.default),t}();t.default=c,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o,r=(o=n(0))&&o.__esModule?o:{default:o};function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function f(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var a=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=f(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e))).node=n.audioContext.createGain(),n.level=1,n.mute=!1,n}var n,o,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(t,r.default),n=t,(o=[{key:"level",get:function(){return this._level},set:function(e){var t=parseFloat(e);t=t>=0?t:0,this._level=t,this.node.gain.value=t,this._mute=0===t}},{key:"mute",get:function(){return this._mute},set:function(e){this._mute=!!e,this._mute?(this._levelBeforeMute=this.level,this.level=0):this.level=this._levelBeforeMute||this._level}}])&&u(n.prototype,o),i&&u(n,i),t}();t.default=a,e.exports=t.default}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,